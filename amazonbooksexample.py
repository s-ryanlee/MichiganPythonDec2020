# -*- coding: utf-8 -*-
"""AmazonBooksExample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I72jLte0Msu7Oh1aMkLnRl8x8HRDE44h

Import packages
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

"""Read file into program"""

df = pd.read_csv('https://raw.githubusercontent.com/s-ryanlee/MiPyExample/main/bestsellers%20with%20categories.csv')
df.rename(columns={'User Rating': 'User_Rating'}, inplace=True)
print(df)

"""Let's say we only want to look at non fiction best sellers"""

nonfiction_bestsellers = df[(df.Genre == 'Non Fiction')]
print(nonfiction_bestsellers)

"""#Data Exploration

Check variable correlations
"""

corr_coe = nonfiction_bestsellers.corr()
print(corr_coe)
sns.heatmap(corr_coe)

"""Simple visualizations"""

#scatterplot using seaborn
sns.scatterplot(data=nonfiction_bestsellers, x='Year', y='Reviews')

#scatterplot using matplotlib
nonfiction_bestsellers.plot('Year', 'User_Rating', kind='scatter')

"""#Basic Linear Regression

Change pandas data frame series to a numpy array
"""

x1 = nonfiction_bestsellers[['Year']].to_numpy()
y1 = nonfiction_bestsellers['Reviews'].to_numpy()
#print(x1, y1)

"""Create Model and view correlation coefficient and intercept value"""

from sklearn import linear_model
model = linear_model.LinearRegression()
model.fit(x1, y1)
print(model.coef_, model.intercept_)

"""Apply regression line to plot"""

nonfiction_bestsellers.plot('Year', 'Reviews', kind='scatter')
predict = model.predict(x1)
plt.plot(x1, model.predict(x1))
plt.show()

"""This is an brief overview of the way my team members plotted their regression during our analysis of Covid-19 data. Unfortunately, at the time, I had very limited experience with using Python for data analysis. They went a few steps further to find information on the accuracy of their models using sklearn.

I am still exploring some of the basics of this package and have yet to figure out how to analyze the regression model further than this.

Even so, I later learned of some statistics specific libraries that made performing regression analysis quite simple in Python, which can be seen below.
"""

import statsmodels.api as sm
import statsmodels.formula.api as smf

model2 = smf.ols("Reviews ~ Year", data=df).fit()
model2.summary()

"""With two lines of code, we can output a nice display. 
Unfortunatley, with this package, must use quotes a bit more often because of literal strings. 
But, allows you to use R-style formulas in python and outputs R-like summary. 
For someone that learned most data analysis in R first, this package is much easier to use at the moment than sklearn. 

We can go a bit further in our analysis by analyzing the residuals
"""

model2.resid

"""And create a histogram of residuals"""

sns.histplot(model2.resid)

"""We can also look at a scatterplot of residuals vs. bty_score"""

sns.scatterplot(x=df['Year'],y=model2.resid)

"""pandas series of the values from the regression summary"""

model2.params

"""Can also access items in this series using .loc"""

model2.params.loc['Year']